Small data exchange program

signals in C:
SIGINT : Control C
signal (SIGINT, handler)

handler ()

allowed functions:
◦ write
you know this
◦ ft_printf and any equivalent YOU coded
NEW signal
void (*signal(int sig, void (*func)(int)))(int);
///These functions manipulate signal sets, stored in a sigset_t.  Either///
     sigemptyset() or sigfillset() must be called for every object of type///
////sigset_t before any other use of the object.////////
◦ sigemptyset
int sigemptyset(sigset_t *set);
NEW The sigemptyset() function initializes a signal set to be empty.
◦ sigaddset
NEW int  sigaddset(sigset_t *set, int signo);
NEW The sigaddset() function adds the specified signal signo to the signal
     set.
◦ sigaction
NEW newer function prefered over signal- code will be more portable
◦ kill
NEW send signals between processes
◦ getpid
NEW process ID
◦ malloc
allocates memory
◦ free
free memory
◦ pause
NEW pause causes calling process to sleep until signal delivered that terminates process / causes invocation of signal-catching function
returns -1 when signal was caught --> errno set to EINTR
◦ sleep
NEW sleep for NUMBER seconds: s or m or h or d
◦ usleep
NEW sleep for microsecond intervals
◦ exit
NEW cause normal process termination
void exit(int status)
value of status & 0377 returned to parent
atexit || on_exit ?

signal handler asynchronously- can interrupt code at any point.

2 executable files -> client & server

1: Server -> display PID
2: Client (params: 1: server PID 2: String to be sent)
Client communicate string passed as param to server. Server receive string and 
display it
Communication : ONLY UNIX signals
Display pretty quickly(1s for 100 char = slow)
Server should be able to be received from several clients in row, without res
2 Signals: SIGUSR1 & SIGUSR2

Signal: Event generated notify process or thread important situation arrived
no: seg fault, bus error, double free

bonus: QUEUEING? server confirms signal by sending 1 to client
support Unicode chars 1
